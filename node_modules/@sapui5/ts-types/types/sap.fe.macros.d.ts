// For Library Version: 1.101.0

declare namespace sap {
  namespace fe {
    /**
     * Library containing the building blocks for SAP Fiori elements.
     */
    namespace macros {
      namespace table {
        /**
         * Definition of a custom action to be used inside the table toolbar
         */
        type Action = {
          /**
           * Reference to the key of another action already displayed in the toolbar to properly place this one
           */
          anchor: string;
          /**
           * Unique identifier of the action
           */
          key: string;
          /**
           * Defines where this action should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement: string;
          /**
           * Event handler to be called when the user chooses the action
           */
          press: string;
          /**
           * Defines if the action requires a selection.
           */
          requiresSelection: boolean;
          /**
           * The text that will be displayed for this action
           */
          text: string;
        };

        /**
         * Definition of a custom column to be used inside the table.
         * The template for the column has to be provided as the default aggregation
         */
        type Column = {
          /**
           * Reference to the key of another column already displayed in the table to properly place this one
           */
          anchor: string;
          /**
           * The text that will be displayed for this column header
           */
          header: string;
          /**
           * Defines the column importance
           * You can define which columns should be automatically moved to the pop-in area based on their importance
           */
          importance: string;
          /**
           * Unique identifier of the column
           */
          key: string;
          /**
           * Defines where this column should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement: string;
        };
      }

      interface $ChartSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Metadata path to the entitySet or navigationProperty
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Id of the FilterBar building block associated with the chart.
         */
        filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * ID of the chart
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Metadata path to the presentation (UI.Chart w or w/o qualifier)
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Parameter which sets the personalization of the MDC chart
         */
        personalization?:
          | boolean
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Specifies the selection mode
         */
        selectionMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $FieldSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A set of options that can be configured.
         */
        formatOptions?:
          | sap.fe.macros.FieldFormatOptions
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The identifier of the Field control.
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An expression that allows you to control the read-only state of the field.
         * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
         * current state.
         */
        readOnly?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Option to add semantic objects to a field.
         * Valid options are either a single semantic object, a stringified array of semantic objects
         * or a single binding expression returning either a single semantic object or an array of semantic objects
         */
        semanticObject?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $FilterBarSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The identifier of the filterbar control.
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $FormSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The identifier of the form control.
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $MacroAPISettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $TableSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * An expression that allows you to control the 'busy' state of the table.
         */
        busy?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Specifies the header text that is shown in the table.
         */
        enableAutoColumnWidth?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the export functionality of the table is enabled or not.
         */
        enableExport?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls whether the table can be opened in fullscreen mode or not.
         */
        enableFullScreen?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the paste functionality of the table is enabled or not.
         */
        enablePaste?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * ID of the FilterBar building block associated with the table.
         */
        filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Specifies the header text that is shown in the table.
         */
        header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the header text should be shown or not.
         */
        headerVisible?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The identifier of the table control.
         */
        id?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether to display the search action.
         */
        isSearchable?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Groups menu actions by key.
         */
        menu?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls which options should be enabled for the table personalization dialog.
         * If it is set to `true`, all possible options for this kind of table are enabled.
         *
         * If it is set to `false`, personalization is disabled.
         *
         *
         *
         * You can also provide a more granular control for the personalization by providing a comma-separated list
         * with the options you want to be available.
         *
         * Available options are:
         *
         *  - Sort
         *
         *  - Column
         *
         *  - Filter
         */
        personalization?:
          | boolean
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An expression that allows you to control the 'read-only' state of the table.
         * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
         * current state.
         */
        readOnly?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the selection mode to be used by the table.
         * Allowed values are `None`, `Single`, `Multi` or `Auto`
         */
        selectionMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the type of table that will be used by the building block to render the data.
         * Allowed values are `GridTable` and `ResponsiveTable`
         */
        type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the kind of variant management that should be enabled for the table.
         * Allowed values are `Page`, `Control` and `None`.
         *
         * If the table is used within a SAP Fiori elements template, the default value will be taken from the current
         * page variant management.
         *
         * Otherwise it's `None`.
         */
        variantManagement?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * @SINCE 1.93.0
       *
       * Building block used specifically in an app using the flexible column layout to add the ‘expand’, ‘reduce’,
       * and ‘close’ action buttons.
       *
       * Usage example:
       * ```javascript
       *
       * <f:DynamicPageTitle id="incidentProcessFlowDynamicPageTitle">
       * 	 <f:navigationActions>
       * 	   <macros:FlexibleColumnLayoutActions />
       * 	 </f:navigationActions>
       * </f:DynamicPageTitle>
       * <macro:FlexibleColumnLayoutActions />
       * ```
       */
      class FlexibleColumnLayoutActions extends sap.fe.macros.MacroMetadata {
        constructor();
      }
      /**
       * @SINCE 1.90.0
       *
       * Building block used to create a form element containing a label and a field.
       */
      class FormElement extends sap.fe.macros.MacroMetadata {
        constructor();
      }
      /**
       * @SINCE 1.90.0
       *
       * Base class for all SAP Fiori elements building blocks. This class is not meant to be used as a stand-alone
       * class.
       */
      class MacroMetadata {
        constructor();
      }
      /**
       * @SINCE 1.93.0
       *
       * Building block used to create a MicroChart based on the metadata provided by OData V4.
       */
      class MicroChart extends sap.fe.macros.MacroMetadata {
        constructor();
      }
      /**
       * @SINCE 1.94.0
       *
       * Building block used to create a paginator control.
       *
       * Usage example:
       * ```javascript
       *
       * <macro:Paginator />
       * ```
       */
      class Paginator extends sap.fe.macros.MacroMetadata {
        constructor();
      }
      /**
       * @SINCE 1.93.0
       *
       * Building block used to create the ‘Share’ functionality.
       *  Please note that the 'Share in SAP Jam' option is only available on platforms that are integrated with
       * SAP Jam.
       *  If you are consuming this macro in an environment where the SAP Fiori launchpad is not available, then
       * the 'Save as Tile' option is not visible.
       *
       * Usage example:
       * ```javascript
       *
       * <macro:Share
       * 	id="someID"
       * 	visible="true"
       * />
       * ```
       */
      class Share extends sap.fe.macros.MacroMetadata {
        constructor();
      }
      /**
       * Building block used to create a chart based on the metadata provided by OData V4.
       *
       *
       * Usually, a contextPath and metaPath is expected.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Chart id="Mychart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" />
       * ```
       */
      class Chart extends sap.fe.macros.MacroAPI {
        constructor();
      }
      /**
       * Building block for creating a field based on the metadata provided by OData V4.
       *
       *
       * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a
       * property from the entity type.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Field id="MyField" metaPath="MyProperty" />
       * ```
       */
      class Field extends sap.fe.macros.MacroAPI {
        constructor();

        /**
         * Adds a message to the field.
         */
        addMessage(
          /**
           * The parameters to create message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Type of the message
             */
            type?: sap.ui.core.MessageType;
          }
        ): string;
        /**
         * Retrieves the current value of the Field.
         */
        getValue(): string | boolean;
        /**
         * Removes a message from the field.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
      }
      /**
       * Building block for creating a FilterBar based on the metadata provided by OData V4.
       *
       *
       * Usually, a SelectionFields annotation is expected.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:FilterBar id="MyFilterBar" metaPath="@com.sap.vocabularies.UI.v1.SelectionFields" />
       * ```
       */
      class FilterBar extends sap.fe.macros.MacroAPI {
        constructor();

        /**
         * Set the filter values for the given property in the filter bar.
         * The filter values can be either a single value or an array of values.
         * Each filter value must be represented as a string corresponding to the given operator.
         */
        setFilterValues(
          /**
           * The path to the property as a condition path
           */
          sConditionPath: string,
          /**
           * The operator to be used (optional) - if not set, the default operator (EQ) will be used
           */
          sOperator: undefined | string,
          /**
           * The values to be applied
           */
          vValues: undefined | string | string[]
        ): any;
      }
      /**
       * Building block for creating a Form based on the metadata provided by OData V4.
       *
       *
       * Usually, a ReferenceFacet or CollectionFacet is expected
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Form id="MyForm" metaPath="@com.sap.vocabularies.UI.v1.Facets/0" />
       * ```
       */
      class Form extends sap.fe.macros.MacroAPI {
        constructor();
      }
      /**
       * Base API control for macros.
       */
      class MacroAPI extends sap.ui.core.Control {
        constructor();
      }
      /**
       * Building block used to create a table based on the metadata provided by OData V4.
       *
       *
       * Usually, a LineItem or PresentationVariant annotation is expected, but the Table building block can also
       * be used to display an EntitySet.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:Table id="MyTable" metaPath="@com.sap.vocabularies.UI.v1.LineItem" />
       * ```
       */
      class Table extends sap.fe.macros.MacroAPI {
        constructor();

        /**
         * Adds a message to the table.
         * The message applies to the whole table and not to an individual table row.
         */
        addMessage(
          /**
           * The parameters to create the message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Message type
             */
            type?: sap.ui.core.MessageType;
          }
        ): string;
        /**
         * Gets contexts from the table that have been selected by the user.
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Removes a message from the table.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
      }

      /**
       * Additional format options for the field.
       */
      type FieldFormatOptions = {
        /**
         *  Defines how the field value and associated text will be displayed together.
         *
         *  Allowed values are "Value", "Description", "ValueDescription" and "DescriptionValue"
         */
        displayMode: string;
        /**
         * Defines if and how the field measure will be displayed.
         *
         * Allowed values are "Hidden" and "ReadOnly"
         */
        measureDisplayMode: string;
        /**
         * Defines how the full text will be displayed.
         *
         * Allowed values are "InPlace" and "Popover"
         */
        textExpandBehaviorDisplay: string;
        /**
         * Maximum number of lines for multiline texts in edit mode.
         */
        textLinesEdit: number;
        /**
         * Maximum number of characters from the beginning of the text field that are shown initially.
         */
        textMaxCharactersDisplay: number;
        /**
         * Maximum number of lines that multiline texts in edit mode can grow to.
         */
        textMaxLines: number;
      };

      /**
       * Definition of a custom filter to be used inside the FilterBar.
       * The template for the FilterField has to be provided as the default aggregation
       */
      type FilterField = {
        /**
         * Reference to the key of another filter already displayed in the table to properly place this one
         */
        anchor: string;
        /**
         * The property name of the FilterField
         */
        key: string;
        /**
         * The text that will be displayed for this FilterField
         */
        label: string;
        /**
         * If set the search will be automatically triggered, when a filter value was changed.
         */
        liveMode: boolean;
        /**
         * Defines where this filter should be placed relative to the defined anchor
         * Allowed values are `Before` and `After`
         */
        placement: string;
        /**
         * Parameter which sets the visibility of the FilterBar building block
         */
        visible: boolean;
      };
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/fe/macros/ChartAPI": undefined;

    "sap/fe/macros/FieldAPI": undefined;

    "sap/fe/macros/FilterBarAPI": undefined;

    "sap/fe/macros/FlexibleColumnLayoutActions.metadata": undefined;

    "sap/fe/macros/FormAPI": undefined;

    "sap/fe/macros/FormElement.metadata": undefined;

    "sap/fe/macros/library": undefined;

    "sap/fe/macros/MacroAPI": undefined;

    "sap/fe/macros/MacroMetadata": undefined;

    "sap/fe/macros/MicroChart.metadata": undefined;

    "sap/fe/macros/Paginator.metadata": undefined;

    "sap/fe/macros/Share.metadata": undefined;

    "sap/fe/macros/TableAPI": undefined;
  }
}
