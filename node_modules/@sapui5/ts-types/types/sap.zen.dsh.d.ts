// For Library Version: 1.101.0

declare namespace sap {
  namespace zen {
    /**
     * Design Studio Runtime Library. Intended only to be used within S/4 HANA Fiori applications.
     */
    namespace dsh {
      namespace widgets {
        /**
         * @deprecated (since 1.89.0)
         *
         * Model implementation for JSON format
         */
        class SDKModel extends sap.ui.model.Model {
          /**
           * Constructor for a new SDKModel.
           */
          constructor(
            /**
             * either the URL where to load the JSON from or a JS object
             */
            oData: object
          );

          /**
           * Creates a new subclass of class sap.zen.dsh.widgets.SDKModel with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.zen.dsh.widgets.SDKModel>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.zen.dsh.widgets.SDKModel.
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
      }

      interface $AnalyticGridSettings extends sap.ui.core.$ControlSettings {
        /**
         * Desired width of the AnalyticGrid control
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Desired width of the AnalyticGrid control
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
         * specific query and selection variant state, this will result in setting one or more variables' values
         * and setting one or more filters on the datasource.
         */
        selection?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Name of the Query to bind the AnalyticGrid to.
         */
        queryName?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Target System alias for data connectivity
         */
        systemAlias?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A string representing the current state of the analytic grid, including data selection and navigation
         * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
         * for example.
         */
        state?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Event is triggered when the state of the AnalyticGrid is changed.
         */
        stateChange?: (oEvent: sap.ui.base.Event) => void;

        /**
         * Event is triggered when the selection is changed.
         */
        selectionChange?: (oEvent: sap.ui.base.Event) => void;
      }

      interface $DshSettings extends sap.ui.core.$ControlSettings {
        /**
         * Name of the Design Studio application to be opened.
         */
        dshAppName?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Path to application specified by dshAppName
         */
        repoPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Desired width of the Design Studio Control
         */
        width?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Desired height of the Design Studio Control
         */
        height?:
          | sap.ui.core.CSSSize
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the type of deployment
         */
        deployment?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the protocol
         */
        protocol?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the client
         */
        client?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the language
         */
        language?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the semantic mappings
         */
        semanticMappings?:
          | object
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the application component
         */
        appComponent?: object | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * whether to defer the creation
         */
        deferCreation?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * the system alias
         */
        systemAlias?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      interface $ValueHelpDialogSettings extends sap.m.$DialogSettings {
        /**
         * @SINCE 1.24
         *
         * Defines the value for the basic search field. The value is set into the basic search field of the filter
         * bar used.
         */
        basicSearchText?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Enables multi-selection in the table used.
         */
        supportMultiselect?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Enables the ranges (conditions) feature in the dialog.
         */
        supportRanges?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
         */
        supportRangesOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Defines the key of the column used for the internal key handling. The value of the column is used for
         * the token key and also to identify the row in the table.
         */
        key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Defines the list of additional keys of the column used for the internal key handling.
         */
        keys?: string[] | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Defines the key of the column used for the token text.
         */
        descriptionKey?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Defines the maximum number of include ranges.
         */
        maxIncludeRanges?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Defines the maximum number of exclude ranges.
         */
        maxExcludeRanges?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
         * value of the range (condition) is converted to uppercase letters.
         */
        displayFormat?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
         * values.
         */
        tokenDisplayBehaviour?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * @SINCE 1.24
         *
         * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
         */
        filterMode?: boolean | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar
         * SmartFilterBar} control to the value help dialog.
         */
        filterBar?: sap.ui.core.Control;

        /**
         * @SINCE 1.24
         *
         * This event is fired when the OK button is pressed.
         */
        ok?: (oEvent: sap.ui.base.Event) => void;

        /**
         * @SINCE 1.24
         *
         * This event is fired when the Cancel button is pressed.
         */
        cancel?: (oEvent: sap.ui.base.Event) => void;

        /**
         * @SINCE 1.32
         *
         * This event is fired when the user selects an item in the items table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        selectionChange?: (oEvent: sap.ui.base.Event) => void;

        /**
         * @SINCE 1.32
         *
         * This event is fired when the user removes one or multiple existing token(s) from the dialog.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        tokenRemove?: (oEvent: sap.ui.base.Event) => void;

        /**
         * @SINCE 1.32
         *
         * This event is fired when the table gets an update and all existing tokens must be selected in the table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        updateSelection?: (oEvent: sap.ui.base.Event) => void;
      }

      /**
       * @SINCE 1.46
       * @deprecated (since 1.89.0)
       * @EXPERIMENTAL (since 1.46)
       *
       * Control for embedding a Design Studio Analytic Grid in an S/4 HANA Fiori application
       */
      class AnalyticGrid extends sap.ui.core.Control {
        /**
         * Constructor for a new AnalyticGrid.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$AnalyticGridSettings
        );
        /**
         * Constructor for a new AnalyticGrid.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$AnalyticGridSettings
        );

        /**
         * Creates a new subclass of class sap.zen.dsh.AnalyticGrid with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.dsh.AnalyticGrid>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.zen.dsh.AnalyticGrid.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.zen.dsh.AnalyticGrid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
         *
         * Event is triggered when the selection is changed.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.zen.dsh.AnalyticGrid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
         *
         * Event is triggered when the selection is changed.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
         *
         * Event is triggered when the state of the AnalyticGrid is changed.
         */
        attachStateChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.AnalyticGrid` itself.
         *
         * Event is triggered when the state of the AnalyticGrid is changed.
         */
        attachStateChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.AnalyticGrid` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.zen.dsh.AnalyticGrid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:stateChange stateChange} event of this `sap.zen.dsh.AnalyticGrid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachStateChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * A SelectionVariant specifying the current selection state of the AnalyticGrid.
             */
            selection?: object;
          }
        ): this;
        /**
         * Fires event {@link #event:stateChange stateChange} to attached listeners.
         */
        fireStateChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Serialized state string.
             */
            state?: string;
          }
        ): this;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Desired width of the AnalyticGrid control
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getQueryName queryName}.
         *
         * Name of the Query to bind the AnalyticGrid to.
         */
        getQueryName(): string;
        /**
         * Gets current value of property {@link #getSelection selection}.
         *
         * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
         * specific query and selection variant state, this will result in setting one or more variables' values
         * and setting one or more filters on the datasource.
         */
        getSelection(): object;
        /**
         * Gets current value of property {@link #getState state}.
         *
         * A string representing the current state of the analytic grid, including data selection and navigation
         * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
         * for example.
         */
        getState(): string;
        /**
         * Gets current value of property {@link #getSystemAlias systemAlias}.
         *
         * Target System alias for data connectivity
         */
        getSystemAlias(): string;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Desired width of the AnalyticGrid control
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Desired width of the AnalyticGrid control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getQueryName queryName}.
         *
         * Name of the Query to bind the AnalyticGrid to.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setQueryName(
          /**
           * New value for property `queryName`
           */
          sQueryName?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSelection selection}.
         *
         * A SelectionVariant specifying the initial selection state used by the AnalyticGrid. Depending on the
         * specific query and selection variant state, this will result in setting one or more variables' values
         * and setting one or more filters on the datasource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSelection(
          /**
           * New value for property `selection`
           */
          oSelection?: object
        ): this;
        /**
         * Sets a new value for property {@link #getState state}.
         *
         * A string representing the current state of the analytic grid, including data selection and navigation
         * state. Intended to be used for saving and recreating inner application state in navigation scenarios,
         * for example.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setState(
          /**
           * New value for property `state`
           */
          sState?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSystemAlias systemAlias}.
         *
         * Target System alias for data connectivity
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSystemAlias(
          /**
           * New value for property `systemAlias`
           */
          sSystemAlias?: string
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Desired width of the AnalyticGrid control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @SINCE 1.44
       * @deprecated (since 1.89)
       *
       * Control for embedding a Design Studio application full-screen in an S/4 HANA Fiori application
       */
      class Dsh extends sap.ui.core.Control {
        /**
         * Constructor for a new Dsh.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$DshSettings
        );
        /**
         * Constructor for a new Dsh.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$DshSettings
        );

        /**
         * Creates a new subclass of class sap.zen.dsh.Dsh with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.dsh.Dsh>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.zen.dsh.Dsh.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;

        addParameter(
          /**
           * the name of the parameter
           */
          sName: string,
          /**
           * the value of the parameter
           */
          sValue: string
        ): string;

        createPage(): void;

        executeScript(
          /**
           * the content of the script
           */
          sScript: string
        ): void;
        /**
         * Gets current value of property {@link #getAppComponent appComponent}.
         *
         * the application component
         */
        getAppComponent(): object;
        /**
         * Gets current value of property {@link #getClient client}.
         *
         * the client
         */
        getClient(): string;

        getComponent(
          /**
           * the Name of the Component
           */
          sName: string
        ): object;

        getDataSource(
          /**
           * the namw of the data source
           */
          sName: string
        ): object;
        /**
         * Gets current value of property {@link #getDeferCreation deferCreation}.
         *
         * whether to defer the creation
         *
         * Default value is `false`.
         */
        getDeferCreation(): boolean;
        /**
         * Gets current value of property {@link #getDeployment deployment}.
         *
         * the type of deployment
         *
         * Default value is `"bw"`.
         */
        getDeployment(): string;
        /**
         * Gets current value of property {@link #getDshAppName dshAppName}.
         *
         * Name of the Design Studio application to be opened.
         *
         * Default value is `"0ANALYSIS"`.
         */
        getDshAppName(): string;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Desired height of the Design Studio Control
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getLanguage language}.
         *
         * the language
         */
        getLanguage(): string;

        getPage(): object;
        /**
         * Gets current value of property {@link #getProtocol protocol}.
         *
         * the protocol
         */
        getProtocol(): string;
        /**
         * Gets current value of property {@link #getRepoPath repoPath}.
         *
         * Path to application specified by dshAppName
         */
        getRepoPath(): string;
        /**
         * Gets current value of property {@link #getSemanticMappings semanticMappings}.
         *
         * the semantic mappings
         */
        getSemanticMappings(): object;
        /**
         * Gets current value of property {@link #getSystemAlias systemAlias}.
         *
         * the system alias
         */
        getSystemAlias(): string;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Desired width of the Design Studio Control
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Initialize cross-application navigation state with an AppState object
         */
        initializeAppState(
          /**
           * The AppState object from which to retrieve and apply Application State.
           */
          oOStartupAppState: object,
          /**
           * Simple Javascript object containing name-value pairs of additional navigation state to be mixed in
           */
          oONavParams: object
        ): void;
        /**
         * Initialize cross-application navigation state directly with AppStateData. e.g., when calculated by sap.ui.generic.app.navigation.service.NavigationHandler
         */
        initializeAppStateData(
          /**
           * The AppStateData to apply
           */
          oOStateData: object,
          /**
           * Simple Javascript object containing name-value pairs of additional navigation state to be mixed in
           */
          oONavParams: object
        ): void;
        /**
         * Sets a new value for property {@link #getAppComponent appComponent}.
         *
         * the application component
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAppComponent(
          /**
           * New value for property `appComponent`
           */
          oAppComponent?: object
        ): this;
        /**
         * Sets a new value for property {@link #getClient client}.
         *
         * the client
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setClient(
          /**
           * New value for property `client`
           */
          sClient?: string
        ): this;
        /**
         * Sets a new value for property {@link #getDeferCreation deferCreation}.
         *
         * whether to defer the creation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDeferCreation(
          /**
           * New value for property `deferCreation`
           */
          bDeferCreation?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getDeployment deployment}.
         *
         * the type of deployment
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"bw"`.
         */
        setDeployment(
          /**
           * New value for property `deployment`
           */
          sDeployment?: string
        ): this;
        /**
         * Sets a new value for property {@link #getDshAppName dshAppName}.
         *
         * Name of the Design Studio application to be opened.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0ANALYSIS"`.
         */
        setDshAppName(
          /**
           * New value for property `dshAppName`
           */
          sDshAppName?: string
        ): this;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Desired height of the Design Studio Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight?: sap.ui.core.CSSSize
        ): this;
        /**
         * Sets a new value for property {@link #getLanguage language}.
         *
         * the language
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLanguage(
          /**
           * New value for property `language`
           */
          sLanguage?: string
        ): this;
        /**
         * Sets a new value for property {@link #getProtocol protocol}.
         *
         * the protocol
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setProtocol(
          /**
           * New value for property `protocol`
           */
          sProtocol?: string
        ): this;
        /**
         * Sets a new value for property {@link #getRepoPath repoPath}.
         *
         * Path to application specified by dshAppName
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRepoPath(
          /**
           * New value for property `repoPath`
           */
          sRepoPath?: string
        ): this;
        /**
         * Sets a new value for property {@link #getSemanticMappings semanticMappings}.
         *
         * the semantic mappings
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticMappings(
          /**
           * New value for property `semanticMappings`
           */
          oSemanticMappings?: object
        ): this;
        /**
         * Sets a new value for property {@link #getSystemAlias systemAlias}.
         *
         * the system alias
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSystemAlias(
          /**
           * New value for property `systemAlias`
           */
          sSystemAlias?: string
        ): this;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Desired width of the Design Studio Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth?: sap.ui.core.CSSSize
        ): this;
      }
      /**
       * @deprecated (since 1.89)
       *
       * The ValueHelpDialog control can be used to implement a value help for an input field.
       */
      class ValueHelpDialog extends sap.m.Dialog {
        /**
         * Constructor for a new valuehelpdialog/ValueHelpDialog.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$ValueHelpDialogSettings
        );
        /**
         * Constructor for a new valuehelpdialog/ValueHelpDialog.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.zen.dsh.$ValueHelpDialogSettings
        );

        /**
         * Creates a new subclass of class sap.zen.dsh.ValueHelpDialog with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.zen.dsh.ValueHelpDialog>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.zen.dsh.ValueHelpDialog.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * @SINCE 1.24
         *
         * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the Cancel button is pressed.
         */
        attachCancel(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the Cancel button is pressed.
         */
        attachCancel(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the OK button is pressed.
         */
        attachOk(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the OK button is pressed.
         */
        attachOk(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the user selects an item in the items table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the user selects an item in the items table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the user removes one or multiple existing token(s) from the dialog.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachTokenRemove(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the user removes one or multiple existing token(s) from the dialog.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachTokenRemove(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
         * `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the table gets an update and all existing tokens must be selected in the table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachUpdateSelection(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
         * `sap.zen.dsh.ValueHelpDialog`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.zen.dsh.ValueHelpDialog` itself.
         *
         * This event is fired when the table gets an update and all existing tokens must be selected in the table.
         *
         * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
         */
        attachUpdateSelection(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.zen.dsh.ValueHelpDialog` itself
           */
          oListener?: object
        ): this;
        /**
         * Destroys the filterBar in the aggregation {@link #getFilterBar filterBar}.
         */
        destroyFilterBar(): this;
        /**
         * @SINCE 1.24
         *
         * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCancel(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Detaches event handler `fnFunction` from the {@link #event:ok ok} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOk(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.zen.dsh.ValueHelpDialog`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Detaches event handler `fnFunction` from the {@link #event:tokenRemove tokenRemove} event of this `sap.zen.dsh.ValueHelpDialog`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTokenRemove(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.32
         *
         * Detaches event handler `fnFunction` from the {@link #event:updateSelection updateSelection} event of
         * this `sap.zen.dsh.ValueHelpDialog`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachUpdateSelection(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Fires event {@link #event:cancel cancel} to attached listeners.
         */
        fireCancel(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): this;
        /**
         * @SINCE 1.24
         *
         * Fires event {@link #event:ok ok} to attached listeners.
         */
        fireOk(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The array of tokens created or modified on the ValueHelpDialog.
             */
            tokens?: sap.m.Token[];
          }
        ): this;
        /**
         * @SINCE 1.32
         *
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The RowSelectionChange event parameter from the hosted table that contains the selected items.
             */
            tableSelectionParams?: object;
            /**
             * Returns an array of objects which represents all selected row tokens. The object contains the token key,
             * the row object data from the model, and the information if the token is selected. ` [{sKey, oRow, bSelect},
             * ...] `
             */
            updateTokens?: object[];
            /**
             * Can be set to `true` to execute the default behaviour of the ValueHelpDialog.
             */
            useDefault?: boolean;
          }
        ): this;
        /**
         * @SINCE 1.32
         *
         * Fires event {@link #event:tokenRemove tokenRemove} to attached listeners.
         */
        fireTokenRemove(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The array of token keys that has been removed.
             */
            tokenKeys?: string[];
            /**
             * Can be set to true to execute the default behaviour of ValueHelpDialog.
             */
            useDefault?: boolean;
          }
        ): this;
        /**
         * @SINCE 1.32
         *
         * Fires event {@link #event:updateSelection updateSelection} to attached listeners.
         */
        fireUpdateSelection(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The array of existing token keys for which the selection in the table has to be updated.
             */
            tokenKeys?: string[];
            /**
             * Can be set to true to execute the default behavior of ValueHelpDialog.
             */
            useDefault?: boolean;
          }
        ): this;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getBasicSearchText basicSearchText}.
         *
         * Defines the value for the basic search field. The value is set into the basic search field of the filter
         * bar used.
         *
         * Default value is `empty string`.
         */
        getBasicSearchText(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getDescriptionKey descriptionKey}.
         *
         * Defines the key of the column used for the token text.
         *
         * Default value is `empty string`.
         */
        getDescriptionKey(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getDisplayFormat displayFormat}.
         *
         * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
         * value of the range (condition) is converted to uppercase letters.
         *
         * Default value is `empty string`.
         */
        getDisplayFormat(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getFilterMode filterMode}.
         *
         * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
         *
         * Default value is `false`.
         */
        getFilterMode(): boolean;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getKey key}.
         *
         * Defines the key of the column used for the internal key handling. The value of the column is used for
         * the token key and also to identify the row in the table.
         *
         * Default value is `empty string`.
         */
        getKey(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getKeys keys}.
         *
         * Defines the list of additional keys of the column used for the internal key handling.
         */
        getKeys(): string[];
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getMaxExcludeRanges maxExcludeRanges}.
         *
         * Defines the maximum number of exclude ranges.
         *
         * Default value is `"-1"`.
         */
        getMaxExcludeRanges(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getMaxIncludeRanges maxIncludeRanges}.
         *
         * Defines the maximum number of include ranges.
         *
         * Default value is `"-1"`.
         */
        getMaxIncludeRanges(): string;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getSupportMultiselect supportMultiselect}.
         *
         * Enables multi-selection in the table used.
         *
         * Default value is `true`.
         */
        getSupportMultiselect(): boolean;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getSupportRanges supportRanges}.
         *
         * Enables the ranges (conditions) feature in the dialog.
         *
         * Default value is `false`.
         */
        getSupportRanges(): boolean;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getSupportRangesOnly supportRangesOnly}.
         *
         * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
         *
         * Default value is `false`.
         */
        getSupportRangesOnly(): boolean;
        /**
         * @SINCE 1.28
         *
         * getTable Gives access to the internal table instance.
         */
        getTable(): object;
        /**
         * @SINCE 1.24
         *
         * Gets current value of property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
         *
         * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
         * values.
         *
         * Default value is `empty string`.
         */
        getTokenDisplayBehaviour(): string;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getDescriptionKey descriptionKey}.
         *
         * Defines the key of the column used for the token text.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setDescriptionKey(
          /**
           * New value for property `descriptionKey`
           */
          sDescriptionKey?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getDisplayFormat displayFormat}.
         *
         * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
         * value of the range (condition) is converted to uppercase letters.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setDisplayFormat(
          /**
           * New value for property `displayFormat`
           */
          sDisplayFormat?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * setExcludeRangeOperations Sets the array for the supported exclude range operations.
         */
        setExcludeRangeOperations(
          /**
           * An array of range operations
           */
          aOperation: sap.zen.dsh.ValueHelpRangeOperation[],
          /**
           * the type for which the operations are defined
           */
          sType: string
        ): void;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getFilterMode filterMode}.
         *
         * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setFilterMode(
          /**
           * New value for property `filterMode`
           */
          bFilterMode?: boolean
        ): this;
        /**
         * @SINCE 1.24
         *
         * setIncludeRangeOperations Sets the array for the supported include range operations.
         */
        setIncludeRangeOperations(
          /**
           * An array of range operations
           */
          aOperation: sap.zen.dsh.ValueHelpRangeOperation[],
          /**
           * the type for which the operations are defined
           */
          sType: string
        ): void;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getKey key}.
         *
         * Defines the key of the column used for the internal key handling. The value of the column is used for
         * the token key and also to identify the row in the table.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getKeys keys}.
         *
         * Defines the list of additional keys of the column used for the internal key handling.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKeys(
          /**
           * New value for property `keys`
           */
          sKeys?: string[]
        ): this;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getMaxExcludeRanges maxExcludeRanges}.
         *
         * Defines the maximum number of exclude ranges.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"-1"`.
         */
        setMaxExcludeRanges(
          /**
           * New value for property `maxExcludeRanges`
           */
          sMaxExcludeRanges?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getMaxIncludeRanges maxIncludeRanges}.
         *
         * Defines the maximum number of include ranges.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"-1"`.
         */
        setMaxIncludeRanges(
          /**
           * New value for property `maxIncludeRanges`
           */
          sMaxIncludeRanges?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * setRangeKeyFields Sets a RangeKeyFields array. This method allows you to specify the KeyFields for the
         * ranges. You can set an array of objects with Key and Label properties to define the key fields.
         */
        setRangeKeyFields(
          /**
           * An array of range KeyFields `[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]`
           */
          aRangeKeyFields: object[]
        ): void;
        /**
         * @SINCE 1.32
         *
         * setTable Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table
         * or sap.m.Table instance internally.
         */
        setTable(
          /**
           * The used table control instance
           */
          oTable: object
        ): void;
        /**
         * @SINCE 1.24
         *
         * Sets a new value for property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
         *
         * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
         * values.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setTokenDisplayBehaviour(
          /**
           * New value for property `tokenDisplayBehaviour`
           */
          sTokenDisplayBehaviour?: string
        ): this;
        /**
         * @SINCE 1.24
         *
         * Sets the array of tokens. The `sap.m.Tokens` are added to the dialog tokenizer Selected Items or Excluded
         * Items. Normal tokens are added to the Selected Items tokenizer only and are selected in the table. `
         * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"}); ` Tokens with the extra data with value 'range'
         * are handled as range tokens or exclude range tokens. ` new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range",
         * { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField":
         * "CompanyCode", "value1": "a", "value2": "z"}); ` The selected items or range tokens are returned in the
         * event parameters of the Ok event.
         */
        setTokens(
          /**
           * An array of token controls
           */
          aTokens: sap.m.Token[]
        ): void;
        /**
         * @SINCE 1.24
         *
         * Update the Control
         *
         * Updates the selection of rows in the table. This function must be called after a first binding or binding
         * update of the table. It will set a table row as selected if a token for this row exists.
         */
        update(): void;
      }
      /**
       * @deprecated (since 1.89)
       * @EXPERIMENTAL
       *
       * Sort Type
       */
      enum ValueHelpRangeOperation {
        /**
         * The Between operation for the ranges.
         */
        BT = "BT",
        /**
         * The Contains operation for the ranges.
         */
        Contains = "Contains",
        /**
         * The EndsWith operation for the ranges.
         */
        EndsWith = "EndsWith",
        /**
         * The Equals operation for the ranges.
         */
        EQ = "EQ",
        /**
         * The Between or equals operation for the ranges.
         */
        GE = "GE",
        /**
         * The Greater operation for the ranges.
         */
        GT = "GT",
        /**
         * The Less or equals operation for the ranges.
         */
        LE = "LE",
        /**
         * The Less operation for the ranges.
         */
        LT = "LT",
        /**
         * The StartsWith operation for the ranges.
         */
        StartsWith = "StartsWith",
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/zen/dsh/AnalyticGrid": undefined;

    "sap/zen/dsh/Dsh": undefined;

    "sap/zen/dsh/library": undefined;

    "sap/zen/dsh/ValueHelpRangeOperation": undefined;

    "sap/zen/dsh/widgets/SDKModel": undefined;

    "sap/zen/dsh/widgets/ValueHelpDialog": undefined;
  }
}
