// For Library Version: 1.101.0

declare namespace sap {
  namespace esh {
    namespace search {
      /**
       * UI5 library: sap.esh.search.ui.
       */
      namespace ui {
        interface $SearchCompositeControlSettings
          extends sap.ui.core.$ControlSettings {
          /**
           * @SINCE 1.93.0
           *
           * An additional CSS class to add to this control
           */
          cssClass?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.93.0
           *
           * Defines the initial search term for the search input.
           */
          searchTerm?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.93.0
           *
           * Defines if the search control will search for the given term right on control instantiation.
           */
          searchOnStart?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.98.0
           *
           * Defines the filter root condition of a filter tree which shall be applied to the search request. This
           * control only allows filter trees which have a the following structure: complex condition (root level)
           * \ complex condition (attribute level) \ simple condition (attribute value level) Filter root conditions
           * which do not follow this structure won't be accepted and an error will be thrown. Please see the below
           * for a more in-depth example.
           */
          filterRootCondition?:
            | object
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.93.0
           *
           * Configuration for the Enterprise Search Client API.
           */
          sinaConfiguration?:
            | object
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.98.0
           *
           * The id of the data source in which it will search right after initialization.
           */
          dataSource?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.98.0
           *
           * Defines selectable search result view types. The value can be set/get in attach event "searchFinished".
           * Case 1, Search in Apps: result is displayed in a mandatory view type `["appSearchResult"]`, and it is
           * not switchable. Case 2.1, Search in All or other Category (configuration.isUshell !== true): result is
           * switchable between different view types. Possible values for the array items are `"searchResultList"`
           * and `"searchResultGrid"`. Case 2.2, Search in All or other Category (configuration.isUshell === true):
           * result is displayed in a mandatory view type `["searchResultList"]`. Case 3, Search in Business Object:
           * result is switchable between different view types. Possible values for the array items are `"searchResultList"`,
           * `"searchResultTable"` and `"searchResultGrid"`. Note: The value of `resultViewTypes` and `resultViewType`
           * must be compatible to each other.
           */
          resultViewTypes?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.98.0
           *
           * Defines active search result view type. The value can be set/get in attach event "searchFinished", and
           * it must be contained in resultViewTypes. Case 1, Search in Apps: result is displayed in a mandatory view
           * type `"appSearchResult"`. Case 2.1, Search in All or other Category (configuration.isUshell !== true):
           * result is switchable between different view types. Possible value is `"searchResultList"`, or `"searchResultGrid"`.
           * Case 2.2, Search in All or other Category (configuration.isUshell === true): result is displayed in a
           * mandatory view type `"searchResultList"`. Case 3, Search in Business Object: result is switchable between
           * different view types. Possible value is `"searchResultList"`, `"searchResultTable"` or `"searchResultGrid"`.
           * Note: The value of `resultViewTypes` and `resultViewType` must be compatible to each other.
           */
          resultViewType?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * @SINCE 1.100.0
           *
           * Defines a pair of search result view settings. The value is an object of properties `resultViewTypes`
           * and `resultViewType`. An example: `{resultViewTypes: ["searchResultList", "searchResultTable"], resultViewType:
           * "searchResultList"}` Find more detail in the definition of each child property. The value can be set/get
           * in attached event "searchFinished". Function `setResultViewSettings` prevents incompatibility of sequential
           * execution of functions `setResultViewTypes` and `setResultViewType`. Note: The value of `resultViewTypes`
           * and `resultViewType` must be compatible to each other.
           */
          resultViewSettings?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Control instances which are part of this composite control.
           */
          content?:
            | sap.ui.core.Control[]
            | sap.ui.core.Control
            | sap.ui.base.ManagedObject.AggregationBindingInfo;

          /**
           * Event is fired when search is started.
           */
          searchStarted?: (oEvent: sap.ui.base.Event) => void;

          /**
           * Event is fired when search is finished.
           */
          searchFinished?: (oEvent: sap.ui.base.Event) => void;
        }

        /**
         * @SINCE 1.93.0
         *
         * This is the SAPUI5 composite control by the Enterprise Search Team which helps to make full use of the
         * Enterprise Search Engine features built into ABAP and HANA. It includes a search input box including
         * a suggestion dropdown, a result list which can have different styles including tiles and table, result
         * facets and more. This control is ready to use with an enterprise search backend service but also allows
         * deep modifications to match requirements of adopting applications.
         */
        class SearchCompositeControl extends sap.ui.core.Control {
          /**
           * Constructs a new `SearchCompositeControl` to interact with SAP Enterprise Search Services.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	https://help.sap.com/viewer/691cb949c1034198800afde3e5be6570/2.0.05/en-US/ce86ef2fd97610149eaaaa0244ca4d36.html
           * 	https://help.sap.com/viewer/6522d0462aeb4909a79c3462b090ec51/1709%20002/en-US
           */
          constructor(
            /**
             * Initial settings for the new control
             */
            mSettings?: sap.esh.search.ui.$SearchCompositeControlSettings
          );
          /**
           * Constructs a new `SearchCompositeControl` to interact with SAP Enterprise Search Services.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	https://help.sap.com/viewer/691cb949c1034198800afde3e5be6570/2.0.05/en-US/ce86ef2fd97610149eaaaa0244ca4d36.html
           * 	https://help.sap.com/viewer/6522d0462aeb4909a79c3462b090ec51/1709%20002/en-US
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: sap.esh.search.ui.$SearchCompositeControlSettings
          );

          /**
           * Creates a new subclass of class sap.esh.search.ui.SearchCompositeControl with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.esh.search.ui.SearchCompositeControl
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.esh.search.ui.SearchCompositeControl.
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Adds some content to the aggregation {@link #getContent content}.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted
             */
            oContent: sap.ui.core.Control
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:searchFinished searchFinished} event of this
           * `sap.esh.search.ui.SearchCompositeControl`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.esh.search.ui.SearchCompositeControl` itself.
           *
           * Event is fired when search is finished.
           */
          attachSearchFinished(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.esh.search.ui.SearchCompositeControl`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:searchFinished searchFinished} event of this
           * `sap.esh.search.ui.SearchCompositeControl`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.esh.search.ui.SearchCompositeControl` itself.
           *
           * Event is fired when search is finished.
           */
          attachSearchFinished(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.esh.search.ui.SearchCompositeControl`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:searchStarted searchStarted} event of this `sap.esh.search.ui.SearchCompositeControl`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.esh.search.ui.SearchCompositeControl` itself.
           *
           * Event is fired when search is started.
           */
          attachSearchStarted(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.esh.search.ui.SearchCompositeControl`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:searchStarted searchStarted} event of this `sap.esh.search.ui.SearchCompositeControl`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.esh.search.ui.SearchCompositeControl` itself.
           *
           * Event is fired when search is started.
           */
          attachSearchStarted(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.esh.search.ui.SearchCompositeControl`
             * itself
             */
            oListener?: object
          ): this;
          /**
           * Destroys all the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:searchFinished searchFinished} event of this
           * `sap.esh.search.ui.SearchCompositeControl`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSearchFinished(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:searchStarted searchStarted} event of this
           * `sap.esh.search.ui.SearchCompositeControl`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSearchStarted(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Fires event {@link #event:searchFinished searchFinished} to attached listeners.
           */
          fireSearchFinished(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): this;
          /**
           * Fires event {@link #event:searchStarted searchStarted} to attached listeners.
           */
          fireSearchStarted(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): this;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * Control instances which are part of this composite control.
           */
          getContent(): sap.ui.core.Control[];
          /**
           * @SINCE 1.93.0
           *
           * Gets current value of property {@link #getCssClass cssClass}.
           *
           * An additional CSS class to add to this control
           */
          getCssClass(): string;
          /**
           * @SINCE 1.98.0
           *
           * Gets current value of property {@link #getDataSource dataSource}.
           *
           * The id of the data source in which it will search right after initialization.
           */
          getDataSource(): string;
          /**
           * @SINCE 1.98.0
           *
           * Gets current value of property {@link #getFilterRootCondition filterRootCondition}.
           *
           * Defines the filter root condition of a filter tree which shall be applied to the search request. This
           * control only allows filter trees which have a the following structure: complex condition (root level)
           * \ complex condition (attribute level) \ simple condition (attribute value level) Filter root conditions
           * which do not follow this structure won't be accepted and an error will be thrown. Please see the below
           * for a more in-depth example.
           */
          getFilterRootCondition(): object;
          /**
           * @SINCE 1.100.0
           *
           * Gets current value of property {@link #getResultViewSettings resultViewSettings}.
           *
           * Defines a pair of search result view settings. The value is an object of properties `resultViewTypes`
           * and `resultViewType`. An example: `{resultViewTypes: ["searchResultList", "searchResultTable"], resultViewType:
           * "searchResultList"}` Find more detail in the definition of each child property. The value can be set/get
           * in attached event "searchFinished". Function `setResultViewSettings` prevents incompatibility of sequential
           * execution of functions `setResultViewTypes` and `setResultViewType`. Note: The value of `resultViewTypes`
           * and `resultViewType` must be compatible to each other.
           */
          getResultViewSettings(): string;
          /**
           * @SINCE 1.98.0
           *
           * Gets current value of property {@link #getResultViewType resultViewType}.
           *
           * Defines active search result view type. The value can be set/get in attach event "searchFinished", and
           * it must be contained in resultViewTypes. Case 1, Search in Apps: result is displayed in a mandatory view
           * type `"appSearchResult"`. Case 2.1, Search in All or other Category (configuration.isUshell !== true):
           * result is switchable between different view types. Possible value is `"searchResultList"`, or `"searchResultGrid"`.
           * Case 2.2, Search in All or other Category (configuration.isUshell === true): result is displayed in a
           * mandatory view type `"searchResultList"`. Case 3, Search in Business Object: result is switchable between
           * different view types. Possible value is `"searchResultList"`, `"searchResultTable"` or `"searchResultGrid"`.
           * Note: The value of `resultViewTypes` and `resultViewType` must be compatible to each other.
           */
          getResultViewType(): string;
          /**
           * @SINCE 1.98.0
           *
           * Gets current value of property {@link #getResultViewTypes resultViewTypes}.
           *
           * Defines selectable search result view types. The value can be set/get in attach event "searchFinished".
           * Case 1, Search in Apps: result is displayed in a mandatory view type `["appSearchResult"]`, and it is
           * not switchable. Case 2.1, Search in All or other Category (configuration.isUshell !== true): result is
           * switchable between different view types. Possible values for the array items are `"searchResultList"`
           * and `"searchResultGrid"`. Case 2.2, Search in All or other Category (configuration.isUshell === true):
           * result is displayed in a mandatory view type `["searchResultList"]`. Case 3, Search in Business Object:
           * result is switchable between different view types. Possible values for the array items are `"searchResultList"`,
           * `"searchResultTable"` and `"searchResultGrid"`. Note: The value of `resultViewTypes` and `resultViewType`
           * must be compatible to each other.
           */
          getResultViewTypes(): string[];
          /**
           * @SINCE 1.93.0
           *
           * Gets current value of property {@link #getSearchOnStart searchOnStart}.
           *
           * Defines if the search control will search for the given term right on control instantiation.
           *
           * Default value is `true`.
           */
          getSearchOnStart(): boolean;
          /**
           * @SINCE 1.93.0
           *
           * Gets current value of property {@link #getSearchTerm searchTerm}.
           *
           * Defines the initial search term for the search input.
           *
           * Default value is `empty string`.
           */
          getSearchTerm(): string;
          /**
           * @SINCE 1.93.0
           *
           * Gets current value of property {@link #getSinaConfiguration sinaConfiguration}.
           *
           * Configuration for the Enterprise Search Client API.
           */
          getSinaConfiguration(): object;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfContent(
            /**
             * The content whose index is looked for
             */
            oContent: sap.ui.core.Control
          ): int;
          /**
           * Inserts a content into the aggregation {@link #getContent content}.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.ui.core.Control,
            /**
             * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
             * is inserted at position 0; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position
             */
            iIndex: int
          ): this;
          /**
           * Removes all the controls from the aggregation {@link #getContent content}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllContent(): sap.ui.core.Control[];
          /**
           * Removes a content from the aggregation {@link #getContent content}.
           */
          removeContent(
            /**
             * The content to remove or its index or id
             */
            vContent: int | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * @SINCE 1.93.0
           *
           * Sets a new value for property {@link #getCssClass cssClass}.
           *
           * An additional CSS class to add to this control
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCssClass(
            /**
             * New value for property `cssClass`
             */
            sCssClass: string
          ): this;
          /**
           * @SINCE 1.98.0
           *
           * Sets a new value for property {@link #getDataSource dataSource}.
           *
           * The id of the data source in which it will search right after initialization.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDataSource(
            /**
             * New value for property `dataSource`
             */
            sDataSource: string
          ): this;
          /**
           * @SINCE 1.98.0
           *
           * Sets a new value for property {@link #getFilterRootCondition filterRootCondition}.
           *
           * Defines the filter root condition of a filter tree which shall be applied to the search request. This
           * control only allows filter trees which have a the following structure: complex condition (root level)
           * \ complex condition (attribute level) \ simple condition (attribute value level) Filter root conditions
           * which do not follow this structure won't be accepted and an error will be thrown. Please see the below
           * for a more in-depth example.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFilterRootCondition(
            /**
             * New value for property `filterRootCondition`
             */
            oFilterRootCondition: object
          ): this;
          /**
           * @SINCE 1.100.0
           *
           * Sets a new value for property {@link #getResultViewSettings resultViewSettings}.
           *
           * Defines a pair of search result view settings. The value is an object of properties `resultViewTypes`
           * and `resultViewType`. An example: `{resultViewTypes: ["searchResultList", "searchResultTable"], resultViewType:
           * "searchResultList"}` Find more detail in the definition of each child property. The value can be set/get
           * in attached event "searchFinished". Function `setResultViewSettings` prevents incompatibility of sequential
           * execution of functions `setResultViewTypes` and `setResultViewType`. Note: The value of `resultViewTypes`
           * and `resultViewType` must be compatible to each other.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setResultViewSettings(
            /**
             * New value for property `resultViewSettings`
             */
            sResultViewSettings: string
          ): this;
          /**
           * @SINCE 1.98.0
           *
           * Sets a new value for property {@link #getResultViewType resultViewType}.
           *
           * Defines active search result view type. The value can be set/get in attach event "searchFinished", and
           * it must be contained in resultViewTypes. Case 1, Search in Apps: result is displayed in a mandatory view
           * type `"appSearchResult"`. Case 2.1, Search in All or other Category (configuration.isUshell !== true):
           * result is switchable between different view types. Possible value is `"searchResultList"`, or `"searchResultGrid"`.
           * Case 2.2, Search in All or other Category (configuration.isUshell === true): result is displayed in a
           * mandatory view type `"searchResultList"`. Case 3, Search in Business Object: result is switchable between
           * different view types. Possible value is `"searchResultList"`, `"searchResultTable"` or `"searchResultGrid"`.
           * Note: The value of `resultViewTypes` and `resultViewType` must be compatible to each other.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setResultViewType(
            /**
             * New value for property `resultViewType`
             */
            sResultViewType: string
          ): this;
          /**
           * @SINCE 1.98.0
           *
           * Sets a new value for property {@link #getResultViewTypes resultViewTypes}.
           *
           * Defines selectable search result view types. The value can be set/get in attach event "searchFinished".
           * Case 1, Search in Apps: result is displayed in a mandatory view type `["appSearchResult"]`, and it is
           * not switchable. Case 2.1, Search in All or other Category (configuration.isUshell !== true): result is
           * switchable between different view types. Possible values for the array items are `"searchResultList"`
           * and `"searchResultGrid"`. Case 2.2, Search in All or other Category (configuration.isUshell === true):
           * result is displayed in a mandatory view type `["searchResultList"]`. Case 3, Search in Business Object:
           * result is switchable between different view types. Possible values for the array items are `"searchResultList"`,
           * `"searchResultTable"` and `"searchResultGrid"`. Note: The value of `resultViewTypes` and `resultViewType`
           * must be compatible to each other.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setResultViewTypes(
            /**
             * New value for property `resultViewTypes`
             */
            sResultViewTypes: string[]
          ): this;
          /**
           * @SINCE 1.93.0
           *
           * Sets a new value for property {@link #getSearchOnStart searchOnStart}.
           *
           * Defines if the search control will search for the given term right on control instantiation.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSearchOnStart(
            /**
             * New value for property `searchOnStart`
             */
            bSearchOnStart?: boolean
          ): this;
          /**
           * @SINCE 1.93.0
           *
           * Sets a new value for property {@link #getSearchTerm searchTerm}.
           *
           * Defines the initial search term for the search input.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setSearchTerm(
            /**
             * New value for property `searchTerm`
             */
            sSearchTerm?: string
          ): this;
          /**
           * @SINCE 1.93.0
           *
           * Sets a new value for property {@link #getSinaConfiguration sinaConfiguration}.
           *
           * Configuration for the Enterprise Search Client API.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSinaConfiguration(
            /**
             * New value for property `sinaConfiguration`
             */
            oSinaConfiguration: object
          ): this;
        }
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/esh/search/ui/library": undefined;

    "sap/esh/search/ui/SearchCompositeControl": undefined;
  }
}
