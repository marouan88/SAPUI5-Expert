// For Library Version: 1.101.0

declare namespace sap {
  namespace sac {
    /**
     * Design Studio Runtime Library. Intended only to be used within S/4 HANA Fiori applications.
     */
    namespace df {
      namespace olap {
        /**
         * A `DataProvider` is a Analytical query exposed via an OLAP engine and accessed via InA protocol HANA
         * - MDS BW Query. In BW it could be done via a CDS view that is annotated as an AnalyticQuery.
         *
         * Instances of this class should only be created by the {sap.sac.df.olap.OlapModel}. The `OlapModel` populates
         * it's exposed data via Binding to Controls. The structure of data exposed by a DataProvider
         * is as follows:
         *
         * **Structure of Exposed Data**
         *
         *
         * 	 - `Grid/Cells`: The list of all `Cell` representing the data retrieved via `DataProvider`
         * 	 - `FreeDimensions`: The list of all Dimensions lying in the Free Axis
         * 	`Name`: the external name of the dimension  `Description`: the language dependant description of
         * the dimension  `IsStructure`: boolean flag indicating whether the dimension is a structure
         *
         * 	 - RowsDimensions: The list of all Dimensions lying on the Rows Axis
         * 	 Name: the external name of the dimension  Description: the language dependant description of the
         * dimension  IsStructure: boolean flag indicating whether the dimension is a structure   *
         * 	 - ColumnsDimensions: The list of all Dimensions lying on the Columns Axis
         * 	 Name: the external name of the dimension  Description: the language dependant description of the
         * dimension  IsStructure: boolean flag indicating whether the dimension is a structure
         * 	 - Conditions: list of conditions (result set filters)
         * 	 - Exceptions: list of exceptions (conditional formats)
         * 	 - StructureMembers: list of structure members (collection of Members of all Structure Dimension)
         */
        class DataProvider {
          /**
           * Constructor for a new DataProvider.
           *
           * A DataProvider represents a navigable queryManager and allows to access and change data from servers
           * providing the InA Protocol.
           */
          constructor(
            /**
             * the model to which the DataProvider belongs
             */
            oOlapModel: sap.sac.df.olap.OlapModel,
            /**
             * name of the DataProvider
             */
            sDataProviderName: string,
            /**
             * update function for update state
             */
            fUndoUpdater: Function,
            /**
             * the firefly application associated to the `OlapModel`
             */
            oApplication: object,
            /**
             * the firefly queryManager that is wrapped by the `DataProvider`
             */
            oQueryManager: object
          );

          /**
           * add a new condition (aka resultset filter).
           */
          addCondition(
            /**
             * Condition Definiton
             */
            oData: object,
            /**
             * Target state of the condition
             */
            bActive: boolean
          ): Promise<this>;
          /**
           * Do a drill operation on a dimension member on an Axis
           */
          drill(
            /**
             * the external name of the Dimension
             */
            sDim: string,
            /**
             * the Tuple Index of the member in the resultset.
             */
            nIndex: int
          ): this;
          /**
           * Gets the scaling factor of a measure or data cell
           */
          getDecimalPlaces(
            /**
             * the Member of the Measure Structure
             */
            sMeasureMember: string,
            /**
             * the Member of the Non Measure Structure, if this is not given the value for the sMeasureMember is returned
             */
            sNonMeasureMember: string
          ): int;
          /**
           * get the list of filters of a dimension
           */
          getFilterOfDim(
            /**
             * the name of the dimension from which the filter is retrieved
             */
            sDim: string
          ): object[];
          /**
           * get the current resultset from the InA Server
           */
          getResultSet(): Promise<this>;
          /**
           * get the list of the jump targets associated to a datacell defined via the report report interface.
           */
          getRRITargets(
            /**
             * Row of the data cell
             */
            nRow: int,
            /**
             * Column of the data cell
             */
            nColumn: int
          ): Promise<this>;
          /**
           * Gets the scaling factor of a measure
           */
          getScalingFactor(
            /**
             * the Member of the Measure Structure
             */
            sMeasureMember: string,
            /**
             * the Member of the Non Measure Structure
             */
            sNonMeasureMember: string
          ): int;
          /**
           * hasVariable Checks whether a Variable is influencing the DataProvider
           */
          hasVariable(
            /**
             * Name of the Variable
             */
            the: string
          ): boolean;
          /**
           * move a dimension one position down on it's axis
           */
          moveDown(
            /**
             * name of the dimension
             */
            sName: string,
            /**
             * Target state of the condition
             */
            bActive: boolean
          ): this;
          /**
           * move a dimension one position up on it's axis
           */
          moveUp(
            /**
             * name of the dimension
             */
            sName: string,
            /**
             * Target state of the condition
             */
            bActive: boolean
          ): this;
          /**
           * Open a dialog that allows to display and change the property of an `Axis` of the `DataProvider`.
           */
          openAxisDialog(
            /**
             * the external name of the Dimension
             */
            sDim: string
          ): Promise<boolean>;
          /**
           * Open a dialog that allows to display and change the property of a `Query Cell` of the `DataProvider`.
           */
          openCellDialog(
            /**
             * the external name of the first structure
             */
            sDim1?: string,
            /**
             * the external name of the member of the first structure
             */
            sMem1?: string,
            /**
             * the external name of the second structure
             */
            sDim2?: string,
            /**
             * the external name of the member of the second structure
             */
            sMem2?: string
          ): Promise<this>;
          /**
           * Open a dialog that allows to display and change the currency translation settings of the `DataProvider`.
           */
          openCurrencyTranslationDialog(): Promise<boolean>;
          /**
           * Open a dialog to display and change the settings of a dimension of the `DataProvider`
           */
          openDimDialog(
            /**
             * the external name of the Dimension
             */
            sDim: string
          ): Promise<boolean>;
          /**
           * Open a dialog to display and change the filter on a dimension of the `DataProvider`
           */
          openSelector(
            /**
             * the external name of the Dimension
             */
            sDimensionName: string
          ): Promise<any>;
          /**
           * Remove the filter of a dimension
           */
          removeFilter(
            /**
             * the external name
             */
            sDim: string
          ): this;
          /**
           * Distribute the dimension among the rows and columns
           */
          setAxesLayout(
            /**
             * an Object containing a `rows` member referencing a string array containing the names of the dimensions
             * and a `columns` member referencing a string array containing the dimension on the columns. The order
             * in the array control the positon on the axis.
             */
            mLayout: object
          ): this;
          /**
           * Sets the number of decimal of a measure/query cell
           */
          setDecimalPlaces(
            /**
             * number of the decimal palaces to be shown after the separator
             */
            nNumberOfDecimalPlaces: int,
            /**
             * the Member of the Measure Structure
             */
            sMeasureMember: string,
            /**
             * Member of the Non Measure Structure, if this is not given the setting is applied for the whole sMeasureMember
             */
            the: string
          ): this;
          /**
           * Set Display Hierachy
           */
          setDisplayHierarchy(
            /**
             * the external name of the structure on which the new restriction is created
             */
            sDim: string,
            /**
             * whether the hierarchy should be activated
             */
            bActive: boolean,
            /**
             * the name of the hierarchy (optional)
             */
            sHierachy: string,
            /**
             * the version of the hierarchy (optional)
             */
            sVersion: string
          ): this;
          /**
           * Set the filter for a dimension
           */
          setFilter(
            /**
             * the external name
             */
            sDim: string,
            /**
             * the filter
             */
            oFilter: object
          ): undefined;
          /**
           * sets the format property of the dataprovider, this can influence the resultset that is aggregated in
           * the `Grid.Cells` collection. Its main purpose is to influence the visualisation of a `sap.sac.df.PivotTable`
           */
          setFormat(
            /**
             * the format to be used
             */
            sFormat: sap.sac.grid.Format
          ): void;
          /**
           * Sets the scaling factor of a measure/query cell
           */
          setScalingFactor(
            /**
             * the exponential of the scaling factor
             */
            nFactor: int,
            /**
             * the Member of the Measure Structure
             */
            sMeasureMember: string,
            /**
             * the Member of the Non Measure Structure
             */
            sNonMeasureMember: string
          ): this;
          /**
           * Sort the members of a dimension
           */
          sort(
            /**
             * the external name of the Dimension
             */
            sDim: string,
            /**
             * of sorting
             */
            type: /* was: sap.sac.df.types.SortType */ any,
            /**
             * of sorting
             */
            direction: /* was: sap.sac.df.types.SortDirection */ any,
            /**
             * in case of a structure the measure according to which is sorted
             */
            sMember?: string
          ): Promise<this>;
          /**
           * submit the value of the input enabled queries to the InA Server
           */
          submitVariables(): Promise<this>;
          /**
           * suppress a unit/currency from being populated to the result cells
           */
          suppressUnit(
            /**
             * the key of the suppressed unit
             */
            sUnit: string
          ): this;
          /**
           * retrieve the data of the current naviation state `DataProvider` from the InA Server.
           */
          synchronize(): Promise<this>;
          /**
           * Move a dimension to the columns axis
           */
          toColumns(
            /**
             * the external name of the Dimension
             */
            sDim: string
          ): this;
          /**
           * Move a dimension to the rows axis
           */
          toRows(
            /**
             * the external name of the Dimension
             */
            sDim: string
          ): this;
        }
        /**
         * List binding implementation for `OlapModel`.
         */
        class OlapListBinding extends sap.ui.model.ListBinding {
          /**
           * Creates a new OlapListBinding.
           *
           * This constructor should only be called by subclasses or model implementations, not by application or
           * control code. Such code should use {@link sap.sac.df.olap.OlapModel#bindList OlapModel#bindList} on the
           * corresponding model instance instead.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.sac.df.olap.OlapListBinding with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.olap.OlapListBinding>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.olap.OlapListBinding.
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * List binding implementation for `OlapModel`.
         */
        class OlapListGridBinding extends sap.ui.model.ListBinding {
          /**
           * Creates a new OlapListGridBinding.
           *
           * This constructor should only be called by subclasses or model implementations, not by application or
           * control code. Such code should use {@link sap.sac.df.OlapModel#bindList OlapModel#bindList} on the corresponding
           * model instance instead.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.sac.df.olap.OlapListGridBinding with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.olap.OlapListGridBinding>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.olap.OlapListGridBinding.
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Model implementation for InA provider
         *
         * The OlapModel can populate it's exposed data via Binding to Controls. The structure of the exposed data
         * is as follows: **Structure of Exposed Data**
         *
         *
         * 	 - FlatVariables: The list of all input ready variables collected from all aggregated `DataProvider`
         *
         * 	 - DataProvider: The associative array of all `DataProvider` aggregated by the   semanticStyles:
         * 			The associative array of all `SemanticStyle` for the `OlapModel` Messages: The list of all messages
         * 			posted by the Analytical Engine
         */
        class OlapModel extends sap.ui.model.Model {
          /**
           * Constructor for a new OlapMode.
           *
           * The Olap Model allows to access and change data from servers providing the InA Protocol.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * the settings for the new Olap Model.
             * 	systemLandscape: The list of addressable Analytic Engines dataProvider: The associative array of
             * all `DataProvider` aggregated by the
             */
            mSettings?: object
          );

          /**
           * Creates a new subclass of class sap.sac.df.olap.OlapModel with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.olap.OlapModel>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.olap.OlapModel.
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * adds a new query as a new `DataProvider` . The query is supposed to be defined as an analytical annotated
           * CDS View  the name of the query is the name of the DDIC view, prefixed by "2C"
           */
          addQuery(
            /**
             * the name of the new `DataProvider`.
             */
            sDataProviderName: string,
            /**
             * the name of the query which the `DataProvider` is supposed to expose.
             */
            sQueryName: string,
            /**
             * the name of the system in the landscape
             */
            sSystem?: string,
            /**
             * the name of the package
             */
            sPackage?: string,
            /**
             * the name of the schema
             */
            sSchema?: string,
            /**
             * the name of the type of the datasource
             */
            sType?: string
          ): Promise<sap.sac.df.olap.DataProvider>;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
           * `sap.sac.df.olap.OlapModel`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.sac.df.olap.OlapModel` itself.
           */
          attachMetadataFailed(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.sac.df.olap.OlapModel` itself
             */
            oListener?: object
          ): this;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:metadataFailed metadataFailed} event of this
           * `sap.sac.df.olap.OlapModel`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.sac.df.olap.OlapModel` itself.
           */
          attachMetadataFailed(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object to call the event handler with. Defaults to this `sap.sac.df.olap.OlapModel` itself
             */
            oListener?: object
          ): this;
          /**
           * deserialize the Model with all aggregated `DataProvider` The `OlapModel` be be deserialized from an equivalent
           * such Object.
           */
          deserialize(): object;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:metadataFailed metadataFailed} event of this
           * `sap.sac.df.olap.OlapModel`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMetadataFailed(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: (p1: sap.ui.base.Event) => void,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): this;
          /**
           * Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.
           */
          fireMetadataFailed(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): this;
          /**
           * retrieves a `DataProvider` aggregated by the `OlapModel`. sQueryName, sSystem
           */
          getDataProvider(
            /**
             * the name of the `DataProvider`.
             */
            sDataProviderName: string
          ): sap.sac.df.olap.DataProvider;
          /**
           * Let the user choose a value for a variable in a dialog
           */
          openVariableSelector(
            /**
             * the name of the variable
             */
            sVar: string
          ): Promise<string>;
          /**
           * Reset the Olap Model to the default query
           */
          resetModel(): void;
          /**
           * serialize the Model with all aggregated `DataProvider` The `OlapModel` to be deserialized from an equivalent
           * such Object.
           */
          serialize(): object;
          /**
           * Replace all input enabled variables with their entered values for all data providers
           */
          submitVariables(): Promise<this>;
          /**
           * snychronize all aggregated dataproviders if the user does not choose an Analytic Query, then the promise
           * is rejected
           */
          synchronize(
            /**
             * List of data provider that are to be synchronized (all if not supplied)
             */
            aDataProviderNames: string[]
          ): Promise<sap.sac.df.olap.OlapModel>;
          /**
           * undoes the last navigation step.
           */
          undo(): Promise<this>;
        }
        /**
         * Property binding implementation for `OlapModel`.
         */
        class OlapPropertyBinding extends sap.ui.model.ListBinding {
          /**
           * Creates a new OlapPropertyBinding.
           *
           * This constructor should only be called by subclasses or model implementations, not by application or
           * control code. Such code should use {@link sap.sac.df.olap.OlapModel#bindProperty OlapModel#bindProperty}
           * on the corresponding model instance instead.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.sac.df.olap.OlapPropertyBinding with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.olap.OlapPropertyBinding>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.olap.OlapPropertyBinding.
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
      }

      namespace types {
        /**
         * Types of navigation commands.
         */
        enum NavigationCommandType {
          /**
           * Click on a cell
           */
          CellClick = "CellClick",
          /**
           * request for additional columns
           */
          ColumnRequest = "ColumnRequest",
          /**
           * Context menu entry
           */
          ContextMenuCmd = "ContextMenuCmd",
          /**
           * Hierachy drill operation
           */
          HierarchyNavigation = "HierarchyNavigation",
          /**
           * request for additional rows
           */
          RowRequest = "RowRequest",
        }
      }

      interface $PivotTableSettings extends sap.ui.core.$ControlSettings {
        /**
         * Name of the Data Provider within {sap.sac.df.olap.OlapModel} with name `om`, which is displayed and available
         * for interactions
         */
        dataProviderName?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Property for different table formats
         */
        format?:
          | sap.sac.grid.Format
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Fired when a user launches a navigation command
         */
        navigationCmd?: (oEvent: sap.ui.base.Event) => void;
      }

      /**
       * Enables users to view, navigate and change multidimensional data exposed via InA in a PivotTable.
       *
       * Overview:
       *
       * The user can view the data in the Pivot Table, navigate in the data via a context menu or enter data
       * in input enables cells cells.
       *
       * Usage:
       *
       * The `PivotTable` is mimicked after the OData Smart Controls. Instead of OData they bind against an {sap.sac.df.olap.OlapModel}
       * with the name "om". Each Analytical Query in the `Olap Model` is exposed as a DataProvider. The data
       * provider that the PivotTable consumes needs to be provided as a property value.
       */
      class PivotTable extends sap.ui.core.Control {
        /**
         * Constructor for a new `PivotTable`.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$PivotTableSettings
        );
        /**
         * Constructor for a new `PivotTable`.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$PivotTableSettings
        );

        /**
         * Creates a new subclass of class sap.sac.df.PivotTable with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.PivotTable>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.PivotTable.
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:navigationCmd navigationCmd} event of this `sap.sac.df.PivotTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.PivotTable` itself.
         *
         * Fired when a user launches a navigation command
         */
        attachNavigationCmd(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.PivotTable` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:navigationCmd navigationCmd} event of this `sap.sac.df.PivotTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.PivotTable` itself.
         *
         * Fired when a user launches a navigation command
         */
        attachNavigationCmd(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.PivotTable` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:navigationCmd navigationCmd} event of this
         * `sap.sac.df.PivotTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNavigationCmd(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: sap.ui.base.Event) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Fires event {@link #event:navigationCmd navigationCmd} to attached listeners.
         */
        fireNavigationCmd(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The control in the cell on which the command was initiated
             */
            anchor?: sap.ui.core.Control;
            /**
             * Type of the navigation command: Context Menu, Drill, Row/Col request, Data Entry
             */
            navigationCmdType?: sap.sac.df.types.NavigationCommandType;
            /**
             * The Row and Column Selection of the cell on which the command was initiated
             */
            selection?: object;
            /**
             * the function that executed the command. The function will return a Promise that resolves/rejects when
             * the command execution finished.
             */
            cmd?: Function;
          }
        ): this;
        /**
         * Gets current value of property {@link #getDataProviderName dataProviderName}.
         *
         * Name of the Data Provider within {sap.sac.df.olap.OlapModel} with name `om`, which is displayed and available
         * for interactions
         *
         * Default value is `"0"`.
         */
        getDataProviderName(): string;
        /**
         * Gets current value of property {@link #getFormat format}.
         *
         * Property for different table formats
         *
         * Default value is `ExcelStyle`.
         */
        getFormat(): sap.sac.grid.Format;
        /**
         * Sets a new value for property {@link #getDataProviderName dataProviderName}.
         *
         * Name of the Data Provider within {sap.sac.df.olap.OlapModel} with name `om`, which is displayed and available
         * for interactions
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `"0"`.
         */
        setDataProviderName(
          /**
           * New value for property `dataProviderName`
           */
          sDataProviderName?: string
        ): this;
        /**
         * Sets a new value for property {@link #getFormat format}.
         *
         * Property for different table formats
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `ExcelStyle`.
         */
        setFormat(
          /**
           * New value for property `format`
           */
          sFormat?: sap.sac.grid.Format
        ): this;
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/sac/df/library": undefined;

    "sap/sac/df/olap/DataProvider": undefined;

    "sap/sac/df/olap/OlapListBinding": undefined;

    "sap/sac/df/olap/OlapListGridBinding": undefined;

    "sap/sac/df/olap/OlapModel": undefined;

    "sap/sac/df/olap/OlapPropertyBinding": undefined;

    "sap/sac/df/PivotTable": undefined;

    "sap/sac/df/types/NavigationCommandType": undefined;
  }
}
